// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package persistence

import (
	"context"
	"database/sql"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (title, description, link, feed_link, updated)
VALUES (?, ?, ?, ?, ?)
RETURNING title, description, link, feed_link, updated
`

type CreateFeedParams struct {
	Title       string
	Description sql.NullString
	Link        sql.NullString
	FeedLink    sql.NullString
	Updated     sql.NullTime
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.Title,
		arg.Description,
		arg.Link,
		arg.FeedLink,
		arg.Updated,
	)
	var i Feed
	err := row.Scan(
		&i.Title,
		&i.Description,
		&i.Link,
		&i.FeedLink,
		&i.Updated,
	)
	return i, err
}

const deleteFeed = `-- name: DeleteFeed :exec
DELETE FROM feeds
WHERE title = ?
`

func (q *Queries) DeleteFeed(ctx context.Context, title string) error {
	_, err := q.db.ExecContext(ctx, deleteFeed, title)
	return err
}

const getFeed = `-- name: GetFeed :one
SELECT title,
	description,
	updated
FROM feeds
WHERE title = ?
LIMIT 1
`

type GetFeedRow struct {
	Title       string
	Description sql.NullString
	Updated     sql.NullTime
}

func (q *Queries) GetFeed(ctx context.Context, title string) (GetFeedRow, error) {
	row := q.db.QueryRowContext(ctx, getFeed, title)
	var i GetFeedRow
	err := row.Scan(&i.Title, &i.Description, &i.Updated)
	return i, err
}

const listFeeds = `-- name: ListFeeds :many
SELECT title,
	description,
	updated
FROM feeds
`

type ListFeedsRow struct {
	Title       string
	Description sql.NullString
	Updated     sql.NullTime
}

func (q *Queries) ListFeeds(ctx context.Context) ([]ListFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, listFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFeedsRow
	for rows.Next() {
		var i ListFeedsRow
		if err := rows.Scan(&i.Title, &i.Description, &i.Updated); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
